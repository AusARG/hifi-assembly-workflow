// Global variables

params {
	out_dir = "${params.bam_folder}/secondary_analysis"
	resultsDirbam2fasta = "${params.bam_folder}/secondary_analysis/Results/preQC"
	resultsjellyfish = "${params.bam_folder}/secondary_analysis/Results/preQC/kmer_analysis"
	resultsgenomescope = "${params.bam_folder}/secondary_analysis/Results/preQC/genome_profiling"
	resultsassembly = "${params.bam_folder}/secondary_analysis/Results/assembly"
	resultsQuast = "${params.bam_folder}/secondary_analysis/Results/postqc/assembly_evaluation"
	resultsBusco = "${params.bam_folder}/secondary_analysis/Results/postqc/assembly_completeness"
	exeReport = "${params.bam_folder}/secondary_analysis/exeReport"
	
  help = false
  dev = false
}





// profiles for processing pipeline

profiles {
	local {
		process.executor = 'local'
		includeConfig './config/local.config'
	}

	balder {
		process.executor = 'slurm'
		includeConfig './config/balder.config'
	}
	
	gadi {
		process.executor = 'gadi'
		includeConfig './config/gadi.config'
	}

}

// Execution logs and reports

timeline {
  enabled = true
  file = "${params.exeReport}/timeline.html"
}
report {
  enabled = true
  file = "${params.exeReport}/report.html"
}
trace {
  enabled = true
  file = "${params.exeReport}/trace.txt"
}
dag {
  enabled = true
  file = "${params.exeReport}/flowchart.png"
}


def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}